/*

Mixins

Mixin tutorial
https: //scotch.io/tutorials/how-to-use-sass-mixins

Some more useful mixins
http: //zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/

*/

// provides a px fallback if the browser doesn'\''t support rem units
// uses golden ratio to calculate line height from font size
// usage example: @include font-size($body-font-size);
@mixin font-size($size: 1.6, $line: $size * 1.5) {
    font-size: ($size * 10) + px;
    line-height: ($line * 10) + px;
    font-size: $size + rem;
    line-height: ($line + rem);
}

//since my default setup is a dark background, this creates a visible selection background
@mixin selection {
    ::-moz selection {
        @content;
    }
    ::selection {
        @content;
    }
}

//used in the rem-fallback function
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

//provides a px fallback if the browser doesn'\''t support rem units
// usage example: @include rem-fallback(margin, 0, 0, 0, 2.4)
@mixin rem-fallback($property, $values...) {
    $max: length($values);
    $pxValues: "";
    $remValues: "";
    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $pxValues: #{$pxValues + $value * 10}px;
        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }
    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $remValues: #{$remValues + $value}rem;
        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }
    #{$property}: $pxValues;
    #{$property}: $remValues;
}

// use:
// .article {
//     @include clearfix();
// }
@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}